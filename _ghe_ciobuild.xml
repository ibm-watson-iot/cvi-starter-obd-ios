<?xml version="1.0" encoding="UTF-8"?>
<project name="project" default="main" basedir=".">
	<description>
		NOTE: This file is only for GHE
		Overwrite the dest repo content with the 'release' branch in the source repo
	</description>

	<property file="_ghe_ciobuild.properties"/>
	<!-- 0. review the reposiroty urls
	      - src.url for repositories
	-->
	<!-- 1. provide credentials in _ghe_ciobuild.properties
	# src (dev)
	src.user=<ghe user>
	src.pass=<ghe access token> (from GHE - settings from top-right icon - personal access tokens)
	# intranet credentials (optional. this script brings prompt if missing)
	IBMIntranetID=<w3 id>
	IBMIntranetPW=<ws pass> (not recommended to put raw password here)
	-->
	<!-- 2. or define properties here
	<property name="src.user" value=""/>
	<property name="src.pass" value=""/>
	-->
	<!-- 3. dry-run and check the result (w/ -Ddry-run=true argument)
	     4. run the script
	     5. delete temporary directories
	        - _tmp.ciobuild_clone.YYYYMMDD
	-->

	<property name="dry-run" value="false"/>

	<tstamp>
		<format property="TAG_NAME" pattern="yyyyMMdd_HHmm" locale="en" timezone="Etc/GMT-9"/>
		<format property="TAG_DATE" pattern="yyyyMMdd" locale="en" timezone="Etc/GMT-9"/>
	</tstamp>

	<!-- for cio build content -->
	<property name="ciobuild.src.branch" value="release"/>
	<property name="ciobuild.build.branch" value="ciobuild"/>

	<property name="src.depth" value="--depth=50"/>

	<property name="src.url" value="https://github.ibm.com/Watson-IoT/IoT-Automotive-OBD2-iOS"/>
	<property name="src.opts" value="${src.depth} -b ${ciobuild.src.branch} --single-branch"/>
	<property name="src.clone" location="_tmp.ciobuild_clone.${TAG_NAME}"/>

	<!-- for cio build -->
	<property name="ciobuild.bundle.id" value="com.ibm.cio.be.iphone.iot.automotive.starter.obd2"/>
	<property name="ciobuild.build.version" value="${TAG_DATE}"/>
	<property name="iotp.orgid" value="kibb33"/>
	<property name="iotp.apikey" value="a-kibb33-rkhexfo7ml"/>
	<property name="iotp.apitoken" value="lDfjTThkWv*@Ea_!4d"/>


	<!-- =================================
          target: main
         ================================= -->
	<target name="main" depends="" description="description">
		<echo>Start cio build w/ tag ${TAG_NAME}...</echo>
		<antcall target="git.clone">
			<param name="repo.url" value="${src.url}"/>
			<param name="repo.user" value="${src.user}"/>
			<param name="repo.pass" value="${src.pass}"/>
			<param name="repo.opts" value="${src.opts}"/>
			<param name="repo.clone" value="${src.clone}"/>
		</antcall>

		<!-- git checkout -->
		<echo>Checking out the ${ciobuild.build.branch} branch...</echo>
		<exec executable="git" dir="${src.clone}" failonerror="true">
			<arg line="remote set-branches --add origin ${ciobuild.build.branch}"/>
		</exec>
		<exec executable="git" dir="${src.clone}" failonerror="true">
			<arg line="fetch ${src.depth} origin"/>
		</exec>
		<exec executable="git" dir="${src.clone}" failonerror="true">
			<arg line="checkout -b ${ciobuild.build.branch} origin/${ciobuild.build.branch}"/>
		</exec>
		<!-- check if the depth is enough for successful merge -->
		<exec executable="git" dir="${src.clone}"  failonerror="false" resultproperty="rc.check.merge-base">
			<arg line="merge-base ${ciobuild.build.branch} ${ciobuild.src.branch}"/>
		</exec>
		<fail message="Issue on the script's git fetch setting. The fetch depth specified by the 'src.depth' property is too shallow to merge ${ciobuild.build.branch} and ${ciobuild.src.branch} (current: ${src.depth}). Please increase the value and retry.">
			<condition><not><equals arg1="${rc.check.merge-base}" arg2="0"/></not></condition>
		</fail>

		<!-- git merge -->
		<exec executable="git" dir="${src.clone}" failonerror="true">
			<arg line="merge --no-ff ${ciobuild.src.branch}"/>
		</exec>

		<!-- set working directory -->
		<property name="work" location="${src.clone}"/>

		<!-- update contents -->
		<antcall target="update_contents_for_ciobuild">
			<param name="work" value="${src.clone}"/>
		</antcall>

		<!-- push changes -->
		<echo>cio build complited. Pushing contents to GHE...</echo>
		<antcall target="push_contents"/>

		<!-- Run the Jenkins Build Job -->
		<echo>=============================================================================</echo>
		<echo>=============================================================================</echo>
		<echo>Run the Jenkins Build Job.</echo>
		<echo>https://ciobuild.cloud.dst.ibm.com/job/IoT-Automotive-OBD2-iOS/</echo>
		<echo>  GYM_SCHEME   = starter.automotive.obdii</echo>
		<echo>  SCAN_SCHEMA  = starter.automotive.obdii</echo>
		<echo>  IPA_NAME     = starter.automotive.obdii</echo>
		<echo>  IPA_VERSION  = [version number]</echo>
		<echo>  GIT_BRANCH   = */ciobuild</echo>
		<echo>  XCODE_SELECT = Xcode_10.2</echo>
		<echo>=============================================================================</echo>
		<echo>=============================================================================</echo>

		<!--
		<echo>Cleaning up tmp...</echo>
		<delete dir="${src.clone}"/>
		-->
		<echo>Done.</echo>
	</target>

	<!--
		Prepare cio build
		https://github.ibm.com/CIOpenmix/fastlane
	-->
	<target name="update_contents_for_ciobuild">
		<!-- API.swift (should be done by git merge) -->
		<!-- replace IoT Platform credentials -->
		<replaceregexp flags="m"
			match="static\s+let\s+orgId:\s+String\s*=.*$"
			replace="static let orgId: String = &quot;${iotp.orgid}&quot;;"
			byline="true">
			<fileset id="fileset.API.swift" dir="${src.clone}">
				<include name="**/starter.automotive.obdii/API.swift"/>
			</fileset>
		</replaceregexp>
		<replaceregexp flags="m"
			match="static\s+let\s+apiKey:\s+String\s*=.*$"
			replace="static let apiKey: String = &quot;${iotp.apikey}&quot;;"
			byline="true">
			<fileset refid="fileset.API.swift"></fileset>
		</replaceregexp>
		<replaceregexp flags="m"
			match="static\s+let\s+apiToken:\s+String\s*=.*$"
			replace="static let apiToken: String = &quot;${iotp.apitoken}&quot;;"
			byline="true">
			<fileset refid="fileset.API.swift"></fileset>
		</replaceregexp>

		<!--
			* Set correct version (starter.automotive.obdii/Info.plist)
			  - update <key>CFBundleVersion</key><value>[VERSION HERE]</version>
		-->
		<replaceregexp flags="g" file="${work}/starter.automotive.obdii/Info.plist"
			match="(&lt;key&gt;CFBundleVersion&lt;/key&gt;\s*&lt;string&gt;)[^&lt;]*(&lt;/string&gt;)"
			replace="\1${ciobuild.build.version}\2"
			/>

		<!-- Remove files -->
		<!-- * Remove IPA file -->
		<delete>
			<fileset dir="${work}">
				<include name="*.ipa"/>
			</fileset>
		</delete>
	</target>

	<!--
	==============================================
	            GIT related targets
	==============================================
	-->

	<target name="stage_contents">
		<echo>Staging changes...</echo>
		<exec executable="git" dir="${src.clone}" failonerror="true">
			<arg line="add --all ."/>
		</exec>
		<exec executable="git" dir="${src.clone}" failonerror="false" resultproperty="gitindexresult">
			<arg line="diff-index --quiet --cached HEAD"/>
		</exec>
		<echo>  Flag if there are staged chagnges: ${gitindexresult}</echo>
		<script language="javascript">
			var r = project.getProperty("gitindexresult");
			if(r != 0){
				project.setProperty("contents_changed", true);
			}
		</script>
	</target>

	<target name="commit_contents" depends="stage_contents" if="contents_changed">
		<!-- tag changes to ciobuild branch with tag -->
		<echo>Tagging source</echo>
		<exec executable="git" dir="${src.clone}" failonerror="true">
			<arg line="tag -a"/>
			<arg value="ciobuild-${TAG_NAME}"/>
			<arg line="-m"/>
			<arg value="Version ${TAG_NAME}"/>
		</exec>

		<echo>Commiting the changes...</echo>
		<exec executable="git" dir="${src.clone}" failonerror="true">
			<arg line="commit -m"/>
			<arg value="${TAG_NAME}"/>
		</exec>
	</target>

	<!-- git push -->
	<target name="push_contents" depends="commit_contents" unless="${dry-run}">
		<echo>Pushing the changes...</echo>
		<exec executable="git" dir="${src.clone}">
			<arg line="push"/>
		</exec>
		<exec executable="git" dir="${src.clone}">
			<arg line="push --tags"/>
		</exec>
		<echo>Source repo is updated with the content tagged as ciobuild-${TAG_NAME}.</echo>
	</target>

	<!-- check if "repo.clone" is a valid clone repo -->
	<target name="check.clone">
		<available type="dir" file="${repo.clone}/.git" property="clone_valid" />
		<fail unless="clone_valid" message="The clone ${repo.clone} is not a Git repository."/>
	</target>

	<!-- git clone utility -->
	<target name="git.clone" depends="git.clone.check,git.clone.reset" unless="git.clone.exists">
		<echo>Cloning repo ${repo.url} to ${repo.clone}...</echo>
		<fail unless="repo.url" />
		<fail unless="repo.clone" />
		<property name="repo.opts" value=""/>
		<!-- default options -->
		<script language="javascript">
			var repo = project.getProperty("repo.url");
			var user = project.getProperty("repo.user");
			var pass = project.getProperty("repo.pass");
			var auth = '' + (user ? user : '') + (pass ? ':'+pass : '');
			if(auth){
				repo = repo.replace('://', '://' + auth + '@');
			}
			project.setProperty("_repo", repo);
		</script>
		<exec executable="git" failonerror="true">
			<arg value="clone"/>
			<arg line="${repo.opts}"/>
			<arg value="${_repo}"/>
			<arg path="${repo.clone}"/>
		</exec>
	</target>
	<target name="git.clone.reset" depends="git.clone.check" if="git.clone.exists">
		<echo>Resetting repo ${repo.clone}...</echo>
		<exec dir="${repo.clone}" executable="git" failonerror="true">
			<arg line="fetch --update-shallow -f origin"/>
		</exec>
		<echo>  resetting ${ciobuild.build.branch}...</echo>
		<exec dir="${repo.clone}" executable="git" failonerror="true">
			<arg line="checkout ${ciobuild.build.branch}"/>
		</exec>
		<exec dir="${repo.clone}" executable="git" failonerror="true">
			<arg line="reset --hard origin/${ciobuild.build.branch}"/>
		</exec>
		<exec dir="${repo.clone}" executable="git" failonerror="true">
			<arg line="clean -fdx"/>
		</exec>
		<echo>  resetting ${ciobuild.src.branch}...</echo>
		<exec dir="${repo.clone}" executable="git" failonerror="true">
			<arg line="checkout ${ciobuild.src.branch}"/>
		</exec>
		<exec dir="${repo.clone}" executable="git" failonerror="true">
			<arg line="reset --hard origin/${ciobuild.src.branch}"/>
		</exec>
		<exec dir="${repo.clone}" executable="git" failonerror="true">
			<arg line="clean -fdx"/>
		</exec>
	</target>
	<target name="git.clone.check">
		<available type="dir" file="${repo.clone}/.git" property="git.clone.exists" />
	</target>

</project>
